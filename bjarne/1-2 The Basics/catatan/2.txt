page 41 - 42

1. Arithmetic operators:
x+y // tambah
+x  // tambah unary
x-y // kurang
-x  // kurang unary
x*y // kali
x/y // bagi
x%y // sisa hanya untuk integer

2. Comparison operators:
x==y    //sama dengan
x!=y    //tidak sama dengan
x<y     //lebih kecil
x>y     //lebih besar
x<=y    //lebih kecil sama dengan
x>=y    //lebih besar sama dengan

3. auto digunakan untuk menghindari redundancy dan menulis tipe nama yang panjang. Hal ini sangat penting dalam generic programming di mana tipe objek sulit diketahui dan nama tipe cenderung panjang.

4. Conventional arithmetic & logical operators:
x+=y    // x = x+y
++x     // increment: x = x+1
x−=y    // x = x-y
−−x     // decrement: x = x-1
x∗=y    // scaling: x = x*y
x/=y    // scaling: x = x/y
x%=y    // x = x%y

5. some data type and initializing variables
double d1 = 2.3;
double d2 {2.3};
complex<double> z = 1;      // a complex number with double-precision floating-point scalars
complex<double> z2 {d1,d2};
complex<double> z3 = {1,2}; // the = is optional with { ... }
vector<int> v {1,2,3,4,5,6};// a vector of ints
int i1 = 7.2;               // i1 becomes 7
int i2 {7.2};               // error : floating-point to integer conversion
int i3 = {7.2};             // error : floating-point to integer conversion (the = is redundant)
auto b = true;              // a bool
auto ch = 'x';              // a char
auto i = 123;               // an int
auto d = 1.2;               // a double
int y = 3, x = 2;
auto z = sqrt(y);           // z has the type of whatever sqr t(y) returns